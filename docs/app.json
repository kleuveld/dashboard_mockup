[{"name":"app.R","content":"#Load packages\n\n#project management\nlibrary(here)\n\n#data management\nlibrary(dplyr)\nlibrary(purrr)\n\n\n#shiny\nlibrary(shiny)\nlibrary(bslib)\nlibrary(leaflet)\nlibrary(RColorBrewer)\n\nlibrary(sf)\n\n\ncountriesISO2 <- c(\"CN\",\"US\",\"IN\",\"RU\",\"JP\",\"DE\",\"KR\",\"ID\",\"SA\",\"CA\",\"BR\",\"ZA\",\"MX\",\"AUS\",\n                     \"GB\",\"VN\",\"IT\",\"FR\",\"AR\",\"NG\")\n\ncountriesISO3 <- c(\"ARG\", \"BRA\", \"CAN\", \"CHN\", \"FRA\", \"DEU\", \"IND\", \"ITA\", \"JPN\", \"KOR\", \"MEX\", \"NGA\",                                                     \n\"RUS\", \"SAU\", \"ZAF\", \"GBR\", \"USA\", \"VNM\", \"IDN\")    \n\nlink <- 'https://raw.githubusercontent.com/kleuveld/dashboard_mockup/main/data/custom.geo.json'\ntemp <- tempfile()\ndownload.file(link,temp)\n\n\nworld_sf <- \n  st_read(temp) %>%\n  select(name,adm0_iso)  %>%\n  mutate(scenario = \"BaU\") %>%\n  bind_rows({.} %>% mutate(scenario = \"Other\"))%>%\n  mutate(biodiversityloss = runif(nrow(.),100, 500)) %>%\n  mutate(tooltip = paste0(\"Country: \", name, \" (\", adm0_iso, \")<br/>\",\n                          \"Biodiversity loss: \", round(biodiversityloss,0)))\n\n\ndefault_data <- world_sf %>% \n        filter(scenario == \"BaU\")\n\n\n# Create a color palette with handmade bins.\nmybins <- c(0, 100, 200, 300 , 400, 500)\nmypalette <- colorBin(\n  palette = \"YlOrBr\", domain = c(100,500),\n  na.color = \"transparent\", bins = 5\n)\n\n\n# UI ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"Biodiversity Dashboard!\"),\n  sidebarLayout(\n    sidebarPanel(width = 3,\n      selectInput(\"scenario\", \"Scenario\", choices = c(\"BaU\", \"Other\")),\n      checkboxGroupInput(\n        \"selected_countries\",\n        \"Select countries\",\n        choices = countriesISO3,\n        selected = countriesISO3\n      ) \n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(width = 9,\n      leafletOutput(\"mymap\"),\n\n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n\n\n  # render default map\n  output$mymap <- renderLeaflet({\n    leaflet(default_data) %>%\n      addTiles() %>%\n      setView(lat = 10, lng = 0, zoom = 2) %>%\n      addPolygons(\n        fillColor = ~ mypalette(biodiversityloss),\n        stroke = TRUE,\n        fillOpacity = 0.9,\n        color = \"white\",\n        weight = 0.3,\n        label = default_data$tooltip %>% map(htmltools::HTML),\n        labelOptions = labelOptions(\n          style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n          textsize = \"13px\",\n          direction = \"auto\"\n        )\n      ) %>%\n      addLegend(\n        pal = mypalette, values = ~biodiversityloss, opacity = 0.9,\n        title = \"Biodiversity loss\", position = \"bottomleft\"\n      )\n\n  })\n\n  # reactively filter data to be displayed on the map\n  data <- \n    reactive({\n        world_sf %>% \n          filter(adm0_iso %in% input$selected_countries) %>%\n          filter(scenario == input$scenario)\n    })\n\n  #dynamically update polygons\n  observe({\n    \n\n    leafletProxy(\"mymap\", data = data()) %>%\n      clearShapes() %>%\n      addPolygons(\n        fillColor = ~ mypalette(biodiversityloss),\n        stroke = TRUE,\n        fillOpacity = 0.9,\n        color = \"white\",\n        weight = 0.3,\n        label = data()$tooltip %>% map(htmltools::HTML),\n        labelOptions = labelOptions(\n          style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n          textsize = \"13px\",\n          direction = \"auto\"\n        )\n      )\n  })\n\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)","type":"text"}]
